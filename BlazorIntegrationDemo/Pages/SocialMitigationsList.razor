@page "/SocialMit"
@using Telerik.ReportViewer.Blazor;
@using Models
@using Business.Repository.IRepository
@inject ISocialRepository SocialRepository
@inject NavigationManager NavigationManager
@inject StoredItems stored

<div class=" row mt-4">
    <div class="col-8">
        <header>
            <h1>  @orgname</h1>
        </header>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="socialmit/create" class="btn btn-info form-control">Add New Social Mitigation Project</NavLink>
    </div>
</div>
<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Progress</th>
                    <th>Social Value in @OrganisationModel.OrganisationCurrency</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>

                    </th>
                </tr>
            </thead>
            <tbody>
                @if (SocialMitigations != null)
                {
                    foreach (var social in SocialMitigations)
                    {
                <tr>
                    <td>@social.SocialName</td>
                    <td>@social.SocialDescription</td>
                    <td>@social.SocialProgress</td>
                    <td>@social.SocialValue</td>
                    <td>@social.SocialStartDate.ToString("dd/MM/yyyy")</td>
                    <td>@social.SocialEndDate.ToString("dd/MM/yyyy")</td>
                    <td>
                        <NavLink href="@($"socialmit/edit/{social.SocialID}")" class="btn btn-primary">Edit</NavLink>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="()=>HandleDelete(social.SocialID)">Delete</button>
                    </td>
                </tr>
                    }
                }
            </tbody>
        </table>
    </div>

</div>
@code {
    private IEnumerable<SocialDTO> SocialMitigations { get; set; } = new List<SocialDTO>();
    private string? DeleteID { get; set; } = null;
    private OrganisationDTO OrganisationModel;
    string orgname = "";

    protected override async Task OnInitializedAsync()
    {

        OrganisationModel = stored.getOrganisation();

        if (OrganisationModel.OrganisationName != "")
        {
            SocialMitigations = await SocialRepository.GetAllSocialsOfType(OrganisationModel.OrganisationID, "Mitigation");
            orgname = " " + OrganisationModel.OrganisationName + " Social Mitigation Projects";
        }
    }

    private async Task HandleDelete(string roomId)
    {
        DeleteID = roomId;
        var DeleteEmployee = await SocialRepository.DeleteSocial(DeleteID);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

}
